in_duo_authentication:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: "*/5 * * * *"
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders:
        - authorization
        - Authorization
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v2/logs/authentication'"
      collectRequestParams:
        - name: mintime
          value: "`${(state.latestTime || earliest || 0) * 1000}`"
        - name: maxtime
          value: "`${Date.now()}`"
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-authentication'"
  description: Duo API for Authentication logs
  savedState: {}
  notifications: []
in_duo_activity:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: "*/5 * * * *"
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders:
        - authorization
        - Authorization
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v2/logs/activity'"
      collectRequestParams:
        - name: mintime
          value: "`${(state.latestTime || earliest || 0) * 1000}`"
        - name: maxtime
          value: "`${Date.now()}`"
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-activity'"
  description: Duo API for Activity logs
  savedState: {}
  notifications: []
in_duo_administrator:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: "*/5 * * * *"
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders:
        - authorization
        - Authorization
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v1/logs/administrator'"
      collectRequestParams:
        - name: mintime
          value: "`${(state.latestTime || earliest || 0) * 1000}`"
        - name: maxtime
          value: "`${Date.now()}`"
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-administrator'"
  description: Duo API for Administrator logs
  savedState: {}
  notifications: []
in_duo_telephony:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: "*/5 * * * *"
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders:
        - authorization
        - Authorization
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v2/logs/telephony'"
      collectRequestParams:
        - name: mintime
          value: "`${(state.latestTime || earliest || 0) * 1000}`"
        - name: maxtime
          value: "`${Date.now()}`"
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-telephony'"
  description: Duo API for Administrator logs
  savedState: {}
  notifications: []
in_duo_offline_enrollment:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: "*/5 * * * *"
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders:
        - authorization
        - Authorization
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v1/logs/offline_enrollment'"
      collectRequestParams:
        - name: mintime
          value: "`${(state.latestTime || earliest || 0) * 1000}`"
        - name: maxtime
          value: "`${Date.now()}`"
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-enrollment'"
  description: Duo API for Administrator logs
  savedState: {}
  notifications: []
in_duo_users:
  type: collection
  ttl: 4h
  ignoreGroupJobsLimit: false
  removeFields: []
  resumeOnBoot: false
  schedule:
    cronSchedule: 0 2 * * *
    maxConcurrentRuns: 1
    skippable: true
    run:
      rescheduleDroppedTasks: true
      maxTaskReschedule: 1
      logLevel: info
      jobTimeout: 60m
      mode: run
      timeRangeType: relative
      timeWarning: {}
      expression: "true"
      minTaskSize: 1MB
      maxTaskSize: 10MB
      stateTracking:
        stateUpdateExpression: "__timestampExtracted !== false && {latestTime:
          (state.latestTime || 0) > _time ? state.latestTime : _time}"
        stateMergeExpression: "(prevState.latestTime || 0) > newState.latestTime ?
          prevState : newState"
        enabled: true
    enabled: false
  streamtags: []
  workerAffinity: false
  collector:
    conf:
      discovery:
        discoverType: none
      collectMethod: get
      pagination:
        type: none
      authentication: hmac
      timeout: 0
      useRoundRobinDns: false
      disableTimeFilter: false
      decodeUrl: false
      rejectUnauthorized: true
      captureHeaders: false
      safeHeaders: []
      retryRules:
        type: backoff
        interval: 1000
        limit: 5
        multiplier: 2
        maxIntervalMs: 20000
        codes:
          - 429
          - 503
        enableHeader: true
        retryConnectTimeout: false
        retryConnectReset: false
        retryHeaderName: retry-after
      __scheduling:
        stateTracking: {}
      collectUrl: "'https://API-HOSTNAME.duosecurity.com/admin/v1/users'"
      collectRequestParams: []
      collectRequestHeaders:
        - name: x-duo-date
          value: "C.Time.strftime(Date.now()/1000, '%a, %d %b %Y %H:%M:%S -0000')"
      hmacFunctionId: duo-hmac
    destructive: false
    encoding: utf8
    type: rest
  input:
    type: collection
    staleChannelFlushMs: 10000
    sendToRoutes: true
    preprocess:
      disabled: true
    throttleRatePerSec: "0"
    breakerRulesets:
      - Duo API Ruleset
    metadata:
      - name: __packsource
        value: "'cribl-duo-rest-io.duo-users'"
  description: API v1 for Duo User data
  savedState: {}
  notifications: []
